/*
Copyright 2008 WebAtlas
Authors : Mathieu Bastian, Mathieu Jacomy, Julian Bilcke
Website : http://www.gephi.org

This file is part of Gephi.

Gephi is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Gephi is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Gephi.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.gephi.desktop.partition;

import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JPanel;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import org.gephi.partition.api.Partition;
import org.gephi.partition.api.PartitionController;
import org.gephi.partition.api.PartitionModel;
import org.openide.util.Lookup;
import org.openide.util.NbBundle;

/**
 *
 * @author Mathieu Bastian
 */
public class PartitionChooser extends javax.swing.JPanel implements ChangeListener {

    //Const
    private final String NO_SELECTION;

    //Architecture
    private PartitionModel model;

    //Data
    private JPanel centerPanel;

    public PartitionChooser() {
        initComponents();
        initEvents();
        NO_SELECTION = NbBundle.getMessage(PartitionChooser.class, "PartitionChooser.choose.text");
        refreshModel();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        chooserPanel = new javax.swing.JPanel();
        partitionComboBox = new javax.swing.JComboBox();
        controlPanel = new javax.swing.JPanel();
        applyButton = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        chooserPanel.setLayout(new java.awt.GridBagLayout());

        partitionComboBox.setPreferredSize(new java.awt.Dimension(56, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        chooserPanel.add(partitionComboBox, gridBagConstraints);

        add(chooserPanel, java.awt.BorderLayout.PAGE_START);

        controlPanel.setLayout(new java.awt.GridBagLayout());

        applyButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/gephi/desktop/partition/apply.gif"))); // NOI18N
        applyButton.setText(org.openide.util.NbBundle.getMessage(PartitionChooser.class, "PartitionChooser.applyButton.text")); // NOI18N
        applyButton.setMargin(new java.awt.Insets(0, 14, 0, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHEAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 3, 5);
        controlPanel.add(applyButton, gridBagConstraints);

        add(controlPanel, java.awt.BorderLayout.PAGE_END);
    }// </editor-fold>//GEN-END:initComponents

    private void initEvents() {
        partitionComboBox.addItemListener(new ItemListener() {

            public void itemStateChanged(ItemEvent e) {
                if (partitionComboBox.getSelectedItem() == NO_SELECTION && model.getSelectedPartition() == null) {
                    return;
                }
                if (partitionComboBox.getSelectedItem() == model.getSelectedPartition()) {
                    return;
                }
                PartitionController pc = Lookup.getDefault().lookup(PartitionController.class);
                pc.setSelectedPartition(partitionComboBox.getSelectedItem() == NO_SELECTION ? null : (Partition) partitionComboBox.getSelectedItem());
            }
        });
    }

    public void setup(PartitionModel model) {
        if (model != null) {
            this.model = model;
            model.addChangeListener(this);
        }
        refreshModel();
    }

    public void unsetup() {
        if (model != null) {
            model.removeChangeListener(this);
            model = null;
        }
        refreshModel();
    }

    private void refreshModel() {
        if(model==null) {
            setEnable(false);
            return;
        }
        setEnable(true);
        if (model.getSelectedPartitioning() == PartitionModel.NODE_PARTITIONING) {
            initChooser(model.getNodePartitions());
        } else if (model.getSelectedPartitioning() == PartitionModel.EDGE_PARTITIONING) {
            initChooser(model.getEdgePartitions());
        }
    }

    private void initChooser(Partition[] partitionArray) {
        DefaultComboBoxModel comboBoxModel = new DefaultComboBoxModel();
        comboBoxModel.addElement(NO_SELECTION);
        comboBoxModel.setSelectedItem(NO_SELECTION);
        for (Partition p : partitionArray) {
            comboBoxModel.addElement(p);
        }
        if (model.getSelectedPartition() != null) {
            comboBoxModel.setSelectedItem(model.getSelectedPartition());
        }
        partitionComboBox.setModel(comboBoxModel);
    }

    private void setEnable(boolean enable) {
        applyButton.setEnabled(enable);
        partitionComboBox.setEnabled(enable);
        if(!enable) {
            partitionComboBox.setModel(new DefaultComboBoxModel(new Object[] {NO_SELECTION}));
            if(centerPanel!=null) {
                remove(centerPanel);
                revalidate();
                repaint();
            }
        }
    }

    public void stateChanged(ChangeEvent e) {
        refreshModel();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton applyButton;
    private javax.swing.JPanel chooserPanel;
    private javax.swing.JPanel controlPanel;
    private javax.swing.JComboBox partitionComboBox;
    // End of variables declaration//GEN-END:variables
}
