/*
Copyright 2008 WebAtlas
Authors : Mathieu Bastian, Mathieu Jacomy, Julian Bilcke
Website : http://www.gephi.org

This file is part of Gephi.

Gephi is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Gephi is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Gephi.  If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * DefaultLayer.java
 *
 * Created on Jun 21, 2009, 5:02:48 PM
 */
package org.gephi.timeline.ui.layers.impl;

import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.image.BufferedImage;
import java.awt.image.BufferedImageOp;
import java.awt.image.ConvolveOp;
import java.awt.image.Kernel;
import java.util.HashMap;
import java.util.Map;
import org.gephi.timeline.ui.layers.api.Layer;
import org.gephi.timeline.ui.skins.impl.DefaultSkin;
import org.gephi.timeline.ui.skins.api.TimelineSkin;

/**
 *
 * @author Julian Bilcke
 */
public class DefaultLayer extends javax.swing.JPanel implements Layer {


    protected TimelineSkin skin;
    protected RenderingHints antialiasingHints;
    protected Kernel convolutionKernel;
    protected BufferedImageOp blurOperator;

    /** Creates new form DefaultLayer */
    public DefaultLayer() {
        initComponents();
        initParameters();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 78, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 73, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    private void initParameters() {
        System.out.println("Generating filters for " + this);
        // filters
        Map map = new HashMap();
        // bilinear
        map.put(RenderingHints.KEY_INTERPOLATION,
                RenderingHints.VALUE_INTERPOLATION_BILINEAR);
        map.put(RenderingHints.KEY_RENDERING,
                RenderingHints.VALUE_RENDER_QUALITY);

        // Antialiasing (text and image)
        map.put(RenderingHints.KEY_ANTIALIASING,
                RenderingHints.VALUE_ANTIALIAS_ON);
        map.put(RenderingHints.KEY_TEXT_ANTIALIASING,
                RenderingHints.VALUE_TEXT_ANTIALIAS_ON);

        antialiasingHints = new RenderingHints(map);

        float ninth = 1.0f / 9.0f;
        float[] blurKernel = {ninth, ninth, ninth, ninth, ninth, ninth, ninth,
            ninth, ninth};
        convolutionKernel = new Kernel(3, 3, blurKernel);
        blurOperator = new ConvolveOp(convolutionKernel, ConvolveOp.EDGE_NO_OP,
                antialiasingHints);

        System.out.println("setting parameters defaults..");
        skin = new DefaultSkin();

        //layer = new BufferedImage(getWidth(), getHeight(), BufferedImage.TYPE_INT_ARGB);
		//Graphics2D graphics2d = layer.createGraphics();
		//graphics2d.setRenderingHints(antialiasingHints);
    }

    public void setSkin(TimelineSkin skin) {
        this.skin = skin;
    }

    @Override
    public void paint(Graphics g) {
        super.paint(g);
        //layer = new BufferedImage(getWidth(), getHeight(), BufferedImage.TYPE_INT_ARGB);
		//Graphics2D graphics2d = layer.createGraphics();
		//graphics2d.setRenderingHints(antialiasingHints);
        
    }
}
