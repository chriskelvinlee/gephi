/*
Copyright 2008 WebAtlas
Authors : Mathieu Bastian, Mathieu Jacomy, Julian Bilcke
Website : http://www.gephi.org

This file is part of Gephi.

Gephi is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Gephi is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Gephi.  If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * UpperPaneDataLayer.java
 *
 * Created on Jun 21, 2009, 3:48:59 PM
 */
package org.gephi.timeline.ui.layers.impl;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Polygon;
import java.awt.color.ColorSpace;
import java.awt.geom.GeneralPath;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.awt.image.BufferedImageOp;
import java.awt.image.ColorConvertOp;
import java.util.Date;
import java.util.List;

/**
 *
 * @author Julian Bilcke
 */
public class UpperPaneDataLayer extends DefaultDataLayer {

    private static final long serialVersionUID = 1L;
    private Integer mousex = null;
    private static Cursor CURSOR_DEFAULT = new Cursor(Cursor.DEFAULT_CURSOR);
    private static Cursor CURSOR_LEFT_HOOK = new Cursor(Cursor.E_RESIZE_CURSOR);
    private static Cursor CURSOR_CENTRAL_HOOK = new Cursor(Cursor.MOVE_CURSOR);
    private static Cursor CURSOR_RIGHT_HOOK = new Cursor(Cursor.W_RESIZE_CURSOR);

    public enum TimelineState {

        IDLE,
        MOVING,
        RESIZE_FROM,
        RESIZE_TO
    }
    TimelineState currentState = TimelineState.IDLE;

    public enum HighlightedComponent {

        NONE,
        LEFT_HOOK,
        RIGHT_HOOK,
        CENTER_HOOK
    }
    HighlightedComponent highlightedComponent = HighlightedComponent.NONE;

    /** Creates new form UpperPaneDataLayer */
    public UpperPaneDataLayer() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                formMouseReleased(evt);
            }
        });
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                formMouseMoved(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private boolean inRange(int x, int a, int b) {
        return (a < x && x < b);
    }

    private void formMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseReleased

        mousex = null;
        //highlightedComponent = HighlightedComponent.NONE;
        currentState = TimelineState.IDLE;
        this.getParent().repaint(); // so it will repaint all panels

    }//GEN-LAST:event_formMouseReleased

    private void formMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseMoved

        //System.out.println("mouse moved");
        int x = evt.getX();
        float w = getWidth();
        int r = skin.getSelectionHookSideLength();
        int sf = (int) (model.getSelectionFrom() * w); // FROM
        int st = (int) (model.getSelectionTo() * w); // TO

        HighlightedComponent old = highlightedComponent;
        Cursor newCursor = null;

        if (inRange(x, sf - 4, sf + 2)) {
            newCursor = CURSOR_LEFT_HOOK;
        } else if (inRange(x, sf + 2, sf + 2 + r)) {
            highlightedComponent = HighlightedComponent.LEFT_HOOK;
        } else if (inRange(x, sf + 2 + r, st - r - 2)) {
            highlightedComponent = HighlightedComponent.CENTER_HOOK;
            newCursor = CURSOR_CENTRAL_HOOK;
        } else if (inRange(x, st - r - 2, st - 2)) {
            highlightedComponent = HighlightedComponent.RIGHT_HOOK;
        } else if (inRange(x, st - 2, st + 4)) {
            newCursor = CURSOR_RIGHT_HOOK;
        } else {
            highlightedComponent = HighlightedComponent.NONE;
            newCursor = CURSOR_DEFAULT;
        }
        if (newCursor != getCursor()) {
            setCursor(newCursor);
        }
        // only repaint if highlight has changed (save a lot of fps)
        if (highlightedComponent != old) {
            repaint();
        }

    }//GEN-LAST:event_formMouseMoved

    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged

        int x = evt.getX();
        float w = getWidth();
        int r = skin.getSelectionHookSideLength();
        int sf = (int) (model.getSelectionFrom() * w); // FROM
        int st = (int) (model.getSelectionTo() * w); // TO


        System.out.println("x: " + x + " currentState: " + currentState);
        if (currentState == TimelineState.IDLE) {
            if (inRange(x, sf - 5, sf + 2)) {
                highlightedComponent = HighlightedComponent.LEFT_HOOK;
                currentState = TimelineState.RESIZE_FROM;
            } else if (inRange(x, sf + 2 + r, st - r - 2)) {
                highlightedComponent = HighlightedComponent.CENTER_HOOK;
                currentState = TimelineState.MOVING;
            } else if (inRange(x, st - 2, st + 5)) {
                highlightedComponent = HighlightedComponent.RIGHT_HOOK;
                currentState = TimelineState.RESIZE_TO;
            }
        }

        int delta = 0;
        if (mousex != null) {
            delta = x - mousex;
        }
        mousex = x;

        switch (currentState) {
            case RESIZE_FROM:
                model.selectFrom(((float) (sf + delta)) / w);
                break;
            case RESIZE_TO:
                model.selectTo(((float) (st + delta)) / w);
                break;
            case MOVING:
                model.selectInterval(((float) (sf + delta)) / w, ((float) (st + delta)) / w);
                break;

        }

        //model.selectTo(TOP_ALIGNMENT);        // TODO add your handling code here:
        this.repaint(); // so it will repaint all panels

    }//GEN-LAST:event_formMouseDragged

    @Override
    public void paint(Graphics g) {
        super.paint(g);

        int width = getWidth();
        int height = getHeight() - 3;

        Graphics2D g2d = (Graphics2D) g;
        BufferedImage buff = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);

        // all this block can be delayed

        Graphics2D bimg2d = buff.createGraphics();
        bimg2d.setRenderingHints(skin.getRenderingHints());
        skin.compileDataLayerPaint(width, height);

        int dataSampleSize = width / 5;
        if (dataSampleSize < 1) {
            dataSampleSize = 1;
        }
        List<Float> data = model.getOverviewSample(dataSampleSize);

        GeneralPath chart = new GeneralPath(GeneralPath.WIND_EVEN_ODD, data.size() + 1);

        chart.moveTo(0, height);
        int i = 0;
        for (Float f : data) {
            chart.lineTo((int) (i++ * ((float) (width)) / (float) (data.size())),
                    (int) (f * height));
        }
        chart.lineTo(width, height);

        //oddShape.curveTo(10, 90, 100, 50, 34, 99);
        chart.closePath();

        bimg2d.setPaint(skin.getHighlightedSelectionLayerPaint());
        bimg2d.fill(chart);

        //g2d.setPaint(Color.black);
        bimg2d.setColor(skin.getDataLayerStrokeColor());
        bimg2d.setStroke(skin.getDataLayerStroke());
        bimg2d.draw(chart);


        int cutx = (int) (width * model.getSelectionFrom());
        if (cutx < 0) {
            cutx = 0;
        }
        if (cutx > width) {
            cutx = width;
        }
        int cuty = 0;

        int cutx2 = (int) (width * model.getSelectionTo());
        if (cutx2 < 0) {
            cutx2 = 10;
        }
        if (cutx2 > width) {
            cutx2 = width;
        }

        int cutw = cutx2 - cutx;
        if (cutw < 0) {
            cutw = 10;
        }

        int cuth = height;
        BufferedImage hbuff = buff.getSubimage(cutx, cuty, cutw, cuth);

        BufferedImageOp op = new ColorConvertOp(ColorSpace.getInstance(ColorSpace.CS_GRAY), null);
        buff = op.filter(buff, null);

        // must be done immediately
        g.drawImage(buff, 0, 0, null);
        g.drawImage(hbuff, cutx, cuty, null);


        int hookWidth = skin.getSelectionHookSideLength();

        // RENDERING OF QUARTZ CONTROLS
        g2d.setRenderingHints(skin.getRenderingHints());
        g2d.setColor(new Color(255, 47, 76, 100));
        int roundcornerradius = 5;


        if (highlightedComponent == HighlightedComponent.LEFT_HOOK) {

            g2d.fillRoundRect(cutx, 1, hookWidth, height, roundcornerradius, roundcornerradius);

            g2d.setColor(Color.WHITE);
            g2d.fillOval(cutx + 2, 3, 12, 12);
            g2d.setColor(Color.LIGHT_GRAY);
            Polygon po = new Polygon();
            po.addPoint(cutx + 6, 6);
            po.addPoint(cutx + 11, 9);
            po.addPoint(cutx + 6, 12);
            g2d.fillPolygon(po);

            g2d.setColor(Color.BLACK);
            g2d.drawPolygon(po);
            g2d.drawOval(cutx + 2, 3, 12, 12);

        } else if (highlightedComponent == HighlightedComponent.RIGHT_HOOK) {

            g2d.fillRoundRect(cutx2 - hookWidth, 1, hookWidth, height, roundcornerradius, roundcornerradius);

            g2d.setColor(Color.WHITE);
            g2d.fillOval((cutx2 - hookWidth) + 2, 3, 12, 12);
            g2d.setColor(Color.LIGHT_GRAY);
            Polygon po = new Polygon();
            po.addPoint((cutx2 - hookWidth) + 6, 6);
            po.addPoint((cutx2 - hookWidth) + 11, 9);
            po.addPoint((cutx2 - hookWidth) + 6, 12);
            g2d.fillPolygon(po);

            g2d.setColor(Color.BLACK);
            g2d.drawPolygon(po);
            g2d.drawOval((cutx2 - hookWidth) + 2, 3, 12, 12);
        }

        g2d.setColor(Color.BLACK);
        g2d.setStroke(new BasicStroke(1.0f));
        g2d.drawRoundRect(cutx, 1, cutw, height, roundcornerradius, roundcornerradius);



        // RENDERING OF OVERLAY LABELS
        g2d.setFont(skin.getDataLayerFont());
        String firstLabel = model.getFirstComparable().toString();
        String lastLabel = model.getLastComparable().toString();

        // get the pixel length of the string
        int lastLabelLength = (int) (skin.getDataLayerFontMetrics().getStringBounds(lastLabel, null)).getWidth();

        g2d.drawString(firstLabel, 5, 12);
        g2d.drawString(lastLabel, width - 5 - lastLabelLength, 12);


    //shape.quadTo(3, 3, 4, 4);
    //shape.curveTo(5, 5, 6, 6, 7, 7);


    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
