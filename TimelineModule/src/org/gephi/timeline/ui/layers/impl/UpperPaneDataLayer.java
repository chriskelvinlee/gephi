/*
Copyright 2008 WebAtlas
Authors : Mathieu Bastian, Mathieu Jacomy, Julian Bilcke
Website : http://www.gephi.org

This file is part of Gephi.

Gephi is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Gephi is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Gephi.  If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * UpperPaneDataLayer.java
 *
 * Created on Jun 21, 2009, 3:48:59 PM
 */
package org.gephi.timeline.ui.layers.impl;

import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.color.ColorSpace;
import java.awt.geom.GeneralPath;
import java.awt.image.BufferedImage;
import java.awt.image.BufferedImageOp;
import java.awt.image.ColorConvertOp;
import java.util.List;

/**
 *
 * @author Julian Bilcke
 */
public class UpperPaneDataLayer extends DefaultDataLayer {

    private static final long serialVersionUID = 1L;
    private Integer mousex = null;

    /** Creates new form UpperPaneDataLayer */
    public UpperPaneDataLayer() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                formMouseReleased(evt);
            }
        });
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private boolean inRange(int x, int a, int b) {
        return (a < x && x < b);
    }
        
    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged

        int x = evt.getX();
        float w = getWidth();
        int r = skin.getSelectionHookSideLength();
        int sf = (int)(model.getSelectionFrom() * w); // FROM
        int st = (int)(model.getSelectionTo() * w); // TO

        // we start
        if (mousex== null) {
            mousex = x;
            return;
        }
        int delta = x - mousex; // + => left to right;  - => right to left;
        if (inRange(x, sf - r, sf + r)) {
            System.out.println("IN LEFT HOOK @ "+x);
            model.selectFrom(((float)(sf + delta)) / w);
        } else if (inRange(x, st - r, st + r)) {
            System.out.println("IN RIGHT HOOK @ "+x);
            model.selectTo(((float)(st + delta)) / w);
        } else if (inRange(x, sf - r, st + r)) {
            System.out.println("IN CENTRAL ZONE @ "+x);
            model.selectInterval(((float)(sf + delta)) / w, ((float)(st + delta)) / w);
        } else {
            return;
        }

        mousex = x;
        //model.selectTo(TOP_ALIGNMENT);        // TODO add your handling code here:
    }//GEN-LAST:event_formMouseDragged

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_formMousePressed

    private void formMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseReleased
        mousex = null;
    }//GEN-LAST:event_formMouseReleased

    @Override
    public void paint(Graphics g) {
        super.paint(g);
        Graphics2D g2d = (Graphics2D) g;
        BufferedImage buff = new BufferedImage(getWidth(), getHeight(), BufferedImage.TYPE_INT_ARGB);

        // all this block can be delayed

        Graphics2D bimg2d = buff.createGraphics();
        bimg2d.setRenderingHints(skin.getRenderingHints());
        skin.compileDataLayerPaint(getWidth(), getHeight());

        int dataSampleSize = getWidth() / 5;
        if (dataSampleSize < 1) {
            dataSampleSize = 1;
        }
        List<Float> data = model.getOverviewSample(dataSampleSize);

        GeneralPath chart = new GeneralPath(GeneralPath.WIND_EVEN_ODD, data.size() + 1);

        chart.moveTo(0, getHeight());
        int i = 0;
        for (Float f : data) {
            chart.lineTo((int) (i++ * ((float) (getWidth())) / (float) (data.size())),
                    (int) (f * getHeight()));
        }
        chart.lineTo(getWidth(), getHeight());

        //oddShape.curveTo(10, 90, 100, 50, 34, 99);
        chart.closePath();

        bimg2d.setPaint(skin.getHighlightedDataLayerPaint());
        bimg2d.fill(chart);

        //g2d.setPaint(Color.black);
        bimg2d.setColor(skin.getDataLayerStrokeColor());
        bimg2d.setStroke(skin.getDataLayerStroke());
        bimg2d.draw(chart);


        int cutx = (int) (getWidth() * model.getSelectionFrom());
        int cuty = 0;
        int cutw = (int) (getWidth() * model.getSelectionTo()) - cutx;
        int cuth = getHeight();
        BufferedImage hbuff = buff.getSubimage(cutx, cuty, cutw, cuth);

        BufferedImageOp op = new ColorConvertOp(ColorSpace.getInstance(ColorSpace.CS_GRAY), null);
        buff = op.filter(buff, null);

        // must be done immediately
        g.drawImage(buff, 0, 0, null);
        g.drawImage(hbuff, cutx, cuty, null);

        g2d.setRenderingHints(skin.getRenderingHints());
        g2d.setFont(new Font("DejaVu Sans Mono", 0, 12));
        g2d.drawString("1 january 1970", 10, 8);

    //shape.quadTo(3, 3, 4, 4);
    //shape.curveTo(5, 5, 6, 6, 7, 7);


    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
