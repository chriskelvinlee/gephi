/*
Copyright 2008 WebAtlas
Authors : Mathieu Bastian, Mathieu Jacomy, Julian Bilcke
Website : http://www.gephi.org

This file is part of Gephi.

Gephi is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Gephi is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Gephi.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.gephi.ui.filters.topology;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import org.gephi.filters.RangeFilter;
import org.gephi.filters.api.Range;
import org.gephi.filters.spi.FilterProperty;
import org.gephi.ui.components.JRangeSliderPanel;
import org.gephi.ui.filters.JQuickHistogram;

/**
 *
 * @author Mathieu Bastian
 */
public class RangePanel extends javax.swing.JPanel {

    private JQuickHistogram histogram;

    public RangePanel() {
        initComponents();
        histogram = new JQuickHistogram();
        histogramPanel.add(histogram.getPanel());
        histogram.setConstraintHeight(30);
    }

    public void setup(final RangeFilter rangeFilter) {
        final JRangeSliderPanel r = (JRangeSliderPanel) rangeSliderPanel;
        Range range = (Range) rangeFilter.getRangeProperty().getValue();

        r.setRange(new JRangeSliderPanel.Range(
                r, rangeFilter.getMinimum(), rangeFilter.getMaximum(), range.getLowerBound(), range.getUpperBound()));

        r.addPropertyChangeListener(new PropertyChangeListener() {

            public void propertyChange(PropertyChangeEvent evt) {
                try {
                    if (evt.getPropertyName().equals(JRangeSliderPanel.LOWER_BOUND)) {
                        Range newRange = new Range(r.getRange().getLowerBound(), r.getRange().getUpperBound());
                        rangeFilter.getRangeProperty().getProperty().setValue(newRange);
                        setupHistogram(rangeFilter, newRange);
                    } else if (evt.getPropertyName().equals(JRangeSliderPanel.UPPER_BOUND)) {
                        Range newRange = new Range(r.getRange().getLowerBound(), r.getRange().getUpperBound());
                        rangeFilter.getRangeProperty().getProperty().setValue(newRange);
                        setupHistogram(rangeFilter, newRange);
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });
        setupHistogram(rangeFilter, range);
    }

    private void setupHistogram(RangeFilter rangeFilter, Range range) {
        Object[] data = rangeFilter.getValues();
        histogram.clear();
        for (int i = 0; i < data.length; i++) {
            histogram.addData(data[i]);
        }
        histogram.sortData();
        double rangeLowerBound = 0.0;
        double rangeUpperBound = 0.0;
        if (range.getRangeType().equals(Integer.class)) {
            rangeLowerBound = ((Integer) range.getLowerBound()).doubleValue();
            rangeUpperBound = ((Integer) range.getUpperBound()).doubleValue();
        } else if (range.getRangeType().equals(Float.class)) {
            rangeLowerBound = ((Float) range.getLowerBound()).doubleValue();
            rangeUpperBound = ((Float) range.getUpperBound()).doubleValue();
        } else if (range.getRangeType().equals(Double.class)) {
            rangeLowerBound = ((Double) range.getLowerBound()).doubleValue();
            rangeUpperBound = ((Double) range.getUpperBound()).doubleValue();
        } else if (range.getRangeType().equals(Long.class)) {
            rangeLowerBound = ((Long) range.getLowerBound()).doubleValue();
            rangeUpperBound = ((Long) range.getUpperBound()).doubleValue();
        }
        histogram.setLowerBound(rangeLowerBound);
        histogram.setUpperBound(rangeUpperBound);

        revalidate();
        repaint();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        rangeSliderPanel = new JRangeSliderPanel();
        histogramPanel = new javax.swing.JPanel();

        setLayout(new java.awt.BorderLayout());
        add(rangeSliderPanel, java.awt.BorderLayout.CENTER);

        histogramPanel.setLayout(new java.awt.BorderLayout());
        add(histogramPanel, java.awt.BorderLayout.SOUTH);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel histogramPanel;
    private javax.swing.JPanel rangeSliderPanel;
    // End of variables declaration//GEN-END:variables
}
