/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * EdgeListPanel.java
 *
 * Created on 22 juin 2009, 15:05:24
 */
package org.gephi.ui.database.standard;

import java.sql.Connection;
import java.sql.SQLException;
import java.util.Collection;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JPanel;
import javax.swing.event.ListDataListener;
import org.gephi.io.database.Database;
import org.gephi.io.database.DatabaseType;
import org.gephi.io.database.EdgeListDatabase;
import org.gephi.io.database.drivers.SQLDriver;
import org.gephi.io.database.drivers.SQLUtils;
import org.gephi.ui.database.DatabaseTypeUI;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;
import org.openide.util.Lookup;

/**
 *
 * @author Mathieu
 */
public class EdgeListPanel extends javax.swing.JPanel implements DatabaseTypeUI {

    private DatabaseType type;

    /** Creates new form EdgeListPanel */
    public EdgeListPanel(DatabaseType type) {
        this.type = type;
        initComponents();

        //Driver Combo
        SQLDriver[] driverArray = new SQLDriver[0];
        driverArray = Lookup.getDefault().lookupAll(SQLDriver.class).toArray(driverArray);
        DefaultComboBoxModel driverModel = new DefaultComboBoxModel(driverArray);
        driverComboBox.setModel(driverModel);
    }

    public void setup(DatabaseType type) {
    }

    public void unsetup() {
        ConfigurationComboModel model = (ConfigurationComboModel) configurationCombo.getModel();
        EdgeListDatabase selectedDB = model.selectedItem.db;
        selectedDB.setDBName(dbTextField.getText());
        selectedDB.setHost(hostTextField.getText());
        selectedDB.setPasswd(pwdTextField.getText());
        selectedDB.setPort(Integer.parseInt(portTextField.getText()));
        selectedDB.setUsername(userTextField.getText());
        selectedDB.setSQLDriver((SQLDriver) driverComboBox.getModel().getSelectedItem());
        selectedDB.setNodeQuery(nodeQueryTextField.getText());
        selectedDB.setEdgeQuery(edgeQueryTextField.getText());
        selectedDB.setNodeAttributesQuery(nodeAttQueryTextField.getText());
        selectedDB.setEdgeAttributesQuery(edgeAttQueryTextField.getText());
    }

    public Database getDatabase() {
        ConfigurationComboModel model = (ConfigurationComboModel) configurationCombo.getModel();
        return model.selectedItem.db;
    }

    public JPanel getPanel() {
        return this;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        configurationCombo = new javax.swing.JComboBox();
        configurationLabel = new javax.swing.JLabel();
        hostLabel = new javax.swing.JLabel();
        portLabel = new javax.swing.JLabel();
        hostTextField = new javax.swing.JTextField();
        portTextField = new javax.swing.JTextField();
        userLabel = new javax.swing.JLabel();
        dbLabel = new javax.swing.JLabel();
        pwdLabel = new javax.swing.JLabel();
        dbTextField = new javax.swing.JTextField();
        userTextField = new javax.swing.JTextField();
        pwdTextField = new javax.swing.JTextField();
        driverLabel = new javax.swing.JLabel();
        driverComboBox = new javax.swing.JComboBox();
        nodeQueryLabel = new javax.swing.JLabel();
        nodeQueryTextField = new javax.swing.JTextField();
        edgeQueryLabel = new javax.swing.JLabel();
        nodeAttQueyLabel = new javax.swing.JLabel();
        edgeAttQueryLabel = new javax.swing.JLabel();
        edgeQueryTextField = new javax.swing.JTextField();
        nodeAttQueryTextField = new javax.swing.JTextField();
        edgeAttQueryTextField = new javax.swing.JTextField();
        testConnection = new javax.swing.JButton();

        configurationCombo.setModel(new EdgeListPanel.ConfigurationComboModel());
        configurationCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                configurationComboActionPerformed(evt);
            }
        });

        configurationLabel.setText(org.openide.util.NbBundle.getMessage(EdgeListPanel.class, "EdgeListPanel.configurationLabel.text")); // NOI18N

        hostLabel.setText(org.openide.util.NbBundle.getMessage(EdgeListPanel.class, "EdgeListPanel.hostLabel.text")); // NOI18N

        portLabel.setText(org.openide.util.NbBundle.getMessage(EdgeListPanel.class, "EdgeListPanel.portLabel.text")); // NOI18N

        portTextField.setText(org.openide.util.NbBundle.getMessage(EdgeListPanel.class, "EdgeListPanel.portTextField.text")); // NOI18N

        userLabel.setText(org.openide.util.NbBundle.getMessage(EdgeListPanel.class, "EdgeListPanel.userLabel.text")); // NOI18N

        dbLabel.setText(org.openide.util.NbBundle.getMessage(EdgeListPanel.class, "EdgeListPanel.dbLabel.text")); // NOI18N

        pwdLabel.setText(org.openide.util.NbBundle.getMessage(EdgeListPanel.class, "EdgeListPanel.pwdLabel.text")); // NOI18N

        dbTextField.setText(org.openide.util.NbBundle.getMessage(EdgeListPanel.class, "EdgeListPanel.dbTextField.text")); // NOI18N

        userTextField.setText(org.openide.util.NbBundle.getMessage(EdgeListPanel.class, "EdgeListPanel.userTextField.text")); // NOI18N

        pwdTextField.setText(org.openide.util.NbBundle.getMessage(EdgeListPanel.class, "EdgeListPanel.pwdTextField.text")); // NOI18N

        driverLabel.setText(org.openide.util.NbBundle.getMessage(EdgeListPanel.class, "EdgeListPanel.driverLabel.text")); // NOI18N

        nodeQueryLabel.setText(org.openide.util.NbBundle.getMessage(EdgeListPanel.class, "EdgeListPanel.nodeQueryLabel.text")); // NOI18N

        nodeQueryTextField.setText(org.openide.util.NbBundle.getMessage(EdgeListPanel.class, "EdgeListPanel.nodeQueryTextField.text")); // NOI18N

        edgeQueryLabel.setText(org.openide.util.NbBundle.getMessage(EdgeListPanel.class, "EdgeListPanel.edgeQueryLabel.text")); // NOI18N

        nodeAttQueyLabel.setText(org.openide.util.NbBundle.getMessage(EdgeListPanel.class, "EdgeListPanel.nodeAttQueyLabel.text")); // NOI18N

        edgeAttQueryLabel.setText(org.openide.util.NbBundle.getMessage(EdgeListPanel.class, "EdgeListPanel.edgeAttQueryLabel.text")); // NOI18N

        edgeQueryTextField.setText(org.openide.util.NbBundle.getMessage(EdgeListPanel.class, "EdgeListPanel.edgeQueryTextField.text")); // NOI18N

        nodeAttQueryTextField.setText(org.openide.util.NbBundle.getMessage(EdgeListPanel.class, "EdgeListPanel.nodeAttQueryTextField.text")); // NOI18N

        edgeAttQueryTextField.setText(org.openide.util.NbBundle.getMessage(EdgeListPanel.class, "EdgeListPanel.edgeAttQueryTextField.text")); // NOI18N

        testConnection.setText(org.openide.util.NbBundle.getMessage(EdgeListPanel.class, "EdgeListPanel.testConnection.text")); // NOI18N
        testConnection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testConnectionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(configurationLabel)
                        .addGap(67, 67, 67)
                        .addComponent(configurationCombo, 0, 442, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(userLabel)
                            .addComponent(pwdLabel)
                            .addComponent(driverLabel)
                            .addComponent(hostLabel)
                            .addComponent(portLabel)
                            .addComponent(dbLabel)
                            .addComponent(nodeQueryLabel)
                            .addComponent(edgeQueryLabel)
                            .addComponent(nodeAttQueyLabel)
                            .addComponent(edgeAttQueryLabel))
                        .addGap(22, 22, 22)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(edgeAttQueryTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 443, Short.MAX_VALUE)
                            .addComponent(nodeAttQueryTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 443, Short.MAX_VALUE)
                            .addComponent(edgeQueryTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 443, Short.MAX_VALUE)
                            .addComponent(nodeQueryTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 443, Short.MAX_VALUE)
                            .addComponent(portTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 443, Short.MAX_VALUE)
                            .addComponent(hostTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 443, Short.MAX_VALUE)
                            .addComponent(dbTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 443, Short.MAX_VALUE)
                            .addComponent(userTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 443, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(driverComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 234, Short.MAX_VALUE)
                                .addComponent(testConnection))
                            .addComponent(pwdTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 443, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(configurationLabel)
                    .addComponent(configurationCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(driverLabel)
                    .addComponent(driverComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(testConnection))
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hostLabel)
                    .addComponent(hostTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(portTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(portLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dbLabel)
                    .addComponent(dbTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(userLabel)
                    .addComponent(userTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pwdLabel)
                    .addComponent(pwdTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nodeQueryLabel)
                    .addComponent(nodeQueryTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(edgeQueryLabel)
                    .addComponent(edgeQueryTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nodeAttQueyLabel)
                    .addComponent(nodeAttQueryTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(edgeAttQueryLabel)
                    .addComponent(edgeAttQueryTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(44, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void testConnectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testConnectionActionPerformed
        unsetup();
        Database db = getDatabase();
        Connection conn = null;
        try {
            conn = db.getSQLDriver().getConnection(SQLUtils.getUrl(db.getSQLDriver(), db.getHost(), db.getPort(), db.getDBName()), db.getUsername(), db.getPasswd());
            NotifyDescriptor.Message e = new NotifyDescriptor.Message("Connection successful!", NotifyDescriptor.INFORMATION_MESSAGE);
            DialogDisplayer.getDefault().notifyLater(e);
        } catch (SQLException ex) {
            NotifyDescriptor.Exception e = new NotifyDescriptor.Exception(ex);
            DialogDisplayer.getDefault().notifyLater(e);
        } finally {
            if (conn != null) {
                try {
                    conn.close();
                    System.out.println("Database connection terminated");
                } catch (Exception e) { /* ignore close errors */ }
            }
        }
    }//GEN-LAST:event_testConnectionActionPerformed

    private void configurationComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_configurationComboActionPerformed
        ConfigurationComboModel model = (ConfigurationComboModel) configurationCombo.getModel();
        EdgeListDatabase selectedDatabase = model.getSelectedItem().db;
        dbTextField.setText(selectedDatabase.getDBName());
        hostTextField.setText(selectedDatabase.getHost());
        portTextField.setText("" + selectedDatabase.getPort());
        userTextField.setText(selectedDatabase.getUsername());
        pwdTextField.setText(selectedDatabase.getPasswd());
        driverComboBox.setSelectedItem(selectedDatabase.getSQLDriver());
        nodeQueryTextField.setText(selectedDatabase.getNodeQuery());
        edgeQueryTextField.setText(selectedDatabase.getEdgeQuery());
        nodeAttQueryTextField.setText(selectedDatabase.getNodeAttributesQuery());
        edgeAttQueryTextField.setText(selectedDatabase.getEdgeAttributesQuery());
    }//GEN-LAST:event_configurationComboActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox configurationCombo;
    private javax.swing.JLabel configurationLabel;
    private javax.swing.JLabel dbLabel;
    private javax.swing.JTextField dbTextField;
    private javax.swing.JComboBox driverComboBox;
    private javax.swing.JLabel driverLabel;
    private javax.swing.JLabel edgeAttQueryLabel;
    private javax.swing.JTextField edgeAttQueryTextField;
    private javax.swing.JLabel edgeQueryLabel;
    private javax.swing.JTextField edgeQueryTextField;
    private javax.swing.JLabel hostLabel;
    private javax.swing.JTextField hostTextField;
    private javax.swing.JTextField nodeAttQueryTextField;
    private javax.swing.JLabel nodeAttQueyLabel;
    private javax.swing.JLabel nodeQueryLabel;
    private javax.swing.JTextField nodeQueryTextField;
    private javax.swing.JLabel portLabel;
    private javax.swing.JTextField portTextField;
    private javax.swing.JLabel pwdLabel;
    private javax.swing.JTextField pwdTextField;
    private javax.swing.JButton testConnection;
    private javax.swing.JLabel userLabel;
    private javax.swing.JTextField userTextField;
    // End of variables declaration//GEN-END:variables

    public void initEvents() {
    }

    private class ConfigurationComboModel implements ComboBoxModel {

        private ConfigurationComboItem[] items;
        private ConfigurationComboItem selectedItem;

        public ConfigurationComboModel() {
            Collection configs = Lookup.getDefault().lookupAll(type.getDatabaseClass());
            items = new ConfigurationComboItem[configs.size() + 1];
            int i = 0;
            for (Object db : configs) {
                EdgeListDatabase dbe = (EdgeListDatabase) db;
                ConfigurationComboItem item = new ConfigurationComboItem();
                item.db = dbe;
                items[i] = item;
                i++;
            }
            EdgeListDatabase db = (EdgeListDatabase) type.createDatabase();
            ConfigurationComboItem item = new ConfigurationComboItem();
            item.db = db;
            db.setName("New configuration");
            items[i] = item;
            selectedItem = items[items.length - 1];
        }

        public void setSelectedItem(Object anItem) {
            this.selectedItem = (ConfigurationComboItem) anItem;
        }

        public ConfigurationComboItem getSelectedItem() {
            return selectedItem;
        }

        public int getSize() {
            return items.length;
        }

        public Object getElementAt(int index) {
            return items[index];
        }

        public void addListDataListener(ListDataListener l) {
        }

        public void removeListDataListener(ListDataListener l) {
        }
    }

    private class ConfigurationComboItem {

        private EdgeListDatabase db;

        public ConfigurationComboItem() {
        }

        public EdgeListDatabase getDb() {
            return db;
        }

        public void setDb(EdgeListDatabase db) {
            this.db = db;
        }

        @Override
        public String toString() {
            String name = db.getName();
            if (name == null || name.isEmpty()) {
                name = SQLUtils.getUrl(db.getSQLDriver(), db.getHost(), db.getPort(), db.getDBName());
            }
            return name;
        }
    }
}
