/*
Copyright 2008 WebAtlas
Authors : Mathieu Bastian, Mathieu Jacomy, Julian Bilcke
Website : http://www.gephi.org

This file is part of Gephi.

Gephi is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Gephi is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Gephi.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.gephi.desktop.filters;

import java.awt.BorderLayout;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.JPanel;
import org.gephi.ui.components.ColumnSelectionPanel;
import org.gephi.ui.components.ColumnSelectionPanel.ColumnSelectionModel;
import org.gephi.ui.components.JSqueezeBoxPanel;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;

/**
 * Top component which displays something.
 */
final class FiltersTopComponent extends TopComponent {

    private static FiltersTopComponent instance;
    /** path to the icon used by the component and its open action */
//    static final String ICON_PATH = "SET/PATH/TO/ICON/HERE";
    private static final String PREFERRED_ID = "FiltersTopComponent";
    private List<ContentPanel> panels;
    private final JSqueezeBoxPanel squeezeBoxPanel = new JSqueezeBoxPanel();

    private FiltersTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(FiltersTopComponent.class, "CTL_FiltersTopComponent"));
        setToolTipText(NbBundle.getMessage(FiltersTopComponent.class, "HINT_FiltersTopComponent"));
//        setIcon(Utilities.loadImage(ICON_PATH, true));

        initContent();
    }

    private void initContent() {
        panels = new ArrayList<ContentPanel>();

        panels.add(new ContentPanel(new JPanel(), "Filter A"));
        panels.add(new ContentPanel(new JPanel(), "Filter B"));
        panels.add(new ContentPanel(new JPanel(), "Filter C"));

        //Somecontent
        panels.get(0).panel.add(new JLabel("Content FilterA"));
        panels.get(1).panel.add(new JLabel("Content FilterB"));
        panels.get(2).panel.add(new JLabel("Content FilterC"));

        squeezeBoxPanel.addPanel(panels.get(0).panel, panels.get(0).name);
        squeezeBoxPanel.addPanel(panels.get(1).panel, panels.get(1).name);
        squeezeBoxPanel.addPanel(panels.get(2).panel, panels.get(2).name);
        centerPanel.add(squeezeBoxPanel, BorderLayout.CENTER);
    }

    private void selectColumnsDialog() {
        ColumnSelectionPanel.showColumnSelectionDialog(panels.toArray(new ColumnSelectionModel[0]), "Select filters");
        for (ContentPanel contentPanel : panels) {
            if (contentPanel.isVisible()) {
                squeezeBoxPanel.addPanel(contentPanel.panel, contentPanel.name);
            } else {
                squeezeBoxPanel.removePanel(contentPanel.panel);
            }
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        toolbarPanel = new javax.swing.JPanel();
        columnsButton = new javax.swing.JButton();
        centerPanel = new javax.swing.JPanel();

        setLayout(new java.awt.BorderLayout());

        toolbarPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        columnsButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/gephi/desktop/filters/hideColumn.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(columnsButton, org.openide.util.NbBundle.getMessage(FiltersTopComponent.class, "FiltersTopComponent.columnsButton.text")); // NOI18N
        columnsButton.setMargin(new java.awt.Insets(2, 2, 2, 2));
        columnsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                columnsButtonActionPerformed(evt);
            }
        });
        toolbarPanel.add(columnsButton);

        add(toolbarPanel, java.awt.BorderLayout.PAGE_START);

        centerPanel.setLayout(new java.awt.BorderLayout());
        add(centerPanel, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void columnsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_columnsButtonActionPerformed
        selectColumnsDialog();
    }//GEN-LAST:event_columnsButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel centerPanel;
    private javax.swing.JButton columnsButton;
    private javax.swing.JPanel toolbarPanel;
    // End of variables declaration//GEN-END:variables

    /**
     * Gets default instance. Do not use directly: reserved for *.settings files only,
     * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
     * To obtain the singleton instance, use {@link #findInstance}.
     */
    public static synchronized FiltersTopComponent getDefault() {
        if (instance == null) {
            instance = new FiltersTopComponent();
        }
        return instance;
    }

    /**
     * Obtain the FiltersTopComponent instance. Never call {@link #getDefault} directly!
     */
    public static synchronized FiltersTopComponent findInstance() {
        TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
        if (win == null) {
            Logger.getLogger(FiltersTopComponent.class.getName()).warning(
                    "Cannot find " + PREFERRED_ID + " component. It will not be located properly in the window system.");
            return getDefault();
        }
        if (win instanceof FiltersTopComponent) {
            return (FiltersTopComponent) win;
        }
        Logger.getLogger(FiltersTopComponent.class.getName()).warning(
                "There seem to be multiple components with the '" + PREFERRED_ID +
                "' ID. That is a potential source of errors and unexpected behavior.");
        return getDefault();
    }

    @Override
    public int getPersistenceType() {
        return TopComponent.PERSISTENCE_ALWAYS;
    }

    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    /** replaces this in object stream */
    @Override
    public Object writeReplace() {
        return new ResolvableHelper();
    }

    @Override
    protected String preferredID() {
        return PREFERRED_ID;
    }

    final static class ResolvableHelper implements Serializable {

        private static final long serialVersionUID = 1L;

        public Object readResolve() {
            return FiltersTopComponent.getDefault();
        }
    }

    private static class ContentPanel implements ColumnSelectionModel {

        private JPanel panel;
        private boolean visible = true;
        private String name;

        public ContentPanel(JPanel panel) {
            this.panel = panel;
        }

        public ContentPanel(JPanel panel, String name) {
            this.panel = panel;
            this.name = name;
            this.panel.setName(name);
        }

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
            this.panel.setName(name);
        }

        public boolean isVisible() {
            return visible;
        }

        public void setVisible(boolean visible) {
            this.visible = visible;
        }

        public boolean isEnabled() {
            return true;
        }

        public boolean isSelected() {
            return visible;
        }

        public void setSelected(boolean selected) {
            visible = selected;
        }
    }
}
