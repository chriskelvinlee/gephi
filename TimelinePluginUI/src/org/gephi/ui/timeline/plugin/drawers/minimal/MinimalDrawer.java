/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MinimalDrawer.java
 *
 * Created on Jan 27, 2010, 1:02:45 PM
 */
package org.gephi.ui.timeline.plugin.drawers.minimal;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Polygon;
import java.awt.color.ColorSpace;
import java.awt.geom.GeneralPath;
import java.awt.image.BufferedImage;
import java.awt.image.BufferedImageOp;
import java.awt.image.ColorConvertOp;
import java.util.List;
import javax.swing.JPanel;
import org.gephi.timeline.api.TimelineModel;
import org.gephi.timeline.spi.TimelineDrawer;

/**
 *
 * @author jbilcke
 */
public class MinimalDrawer extends JPanel implements TimelineDrawer {
    
    private static final long serialVersionUID = 1L;
    private MinimalDrawerSettings settings = new MinimalDrawerSettings();

    /** Creates new form MinimalDrawer */
    public MinimalDrawer() {
        
        initComponents();

    }
    private TimelineModel model = null;

    public void setModel(TimelineModel model) {
        this.model = model;
    }

    public TimelineModel getModel() {
        return model;
    }


    private Integer mousex = null;

    private static Cursor CURSOR_DEFAULT = new Cursor(Cursor.DEFAULT_CURSOR);
    private static Cursor CURSOR_LEFT_HOOK = new Cursor(Cursor.E_RESIZE_CURSOR);
    private static Cursor CURSOR_CENTRAL_HOOK = new Cursor(Cursor.MOVE_CURSOR);
    private static Cursor CURSOR_RIGHT_HOOK = new Cursor(Cursor.W_RESIZE_CURSOR);


    public enum TimelineState {

        IDLE,
        MOVING,
        RESIZE_FROM,
        RESIZE_TO
    }
    TimelineState currentState = TimelineState.IDLE;

    public enum HighlightedComponent {

        NONE,
        LEFT_HOOK,
        RIGHT_HOOK,
        CENTER_HOOK
    }
    HighlightedComponent highlightedComponent = HighlightedComponent.NONE;

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 519, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 128, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
       @Override
    public void paint(Graphics g) {
        super.paint(g);

        int width = getWidth();
        int height = getHeight();

        Graphics2D g2d = (Graphics2D) g;

        g2d.setBackground(settings.background.top);
        g2d.setPaint(settings.background.paint);
        g2d.fillRect(0, 0, width, height);

        g2d.setRenderingHints(settings.renderingHints);
      
        g2d.setFont(settings.informations.font);

        String firstLabel = "hello";//model.getFirstComparable().toString();
        String lastLabel = "world";//model.getLastComparable().toString();

        // get the pixel length of the string
        int lastLabelLength = (int) (settings.informations.fontMetrics.getStringBounds(lastLabel, null)).getWidth();

        g2d.drawString(firstLabel, 5, 12);
        g2d.drawString(lastLabel, width - 5 - lastLabelLength, 12);


    //shape.quadTo(3, 3, 4, 4);
    //shape.curveTo(5, 5, 6, 6, 7, 7);


    }

    private boolean inRange(int x, int a, int b) {
        return (a < x && x < b);
    }

    private void formMouseReleased(java.awt.event.MouseEvent evt) {

        mousex = null;
        //highlightedComponent = HighlightedComponent.NONE;
        currentState = TimelineState.IDLE;
        this.getParent().repaint(); // so it will repaint all panels

    }

    private void formMouseMoved(java.awt.event.MouseEvent evt) {

        //System.out.println("mouse moved");
        int x = evt.getX();
        float w = getWidth();
        int r = 16;

        // TODO
        int sf = 0;//(int) (model.getSelectionFrom() * w); // FROM
        int st = 0;//(int) (model.getSelectionTo() * w); // TO

        HighlightedComponent old = highlightedComponent;
        Cursor newCursor = null;

        if (inRange(x, sf - 4, sf + 2)) {
            newCursor = CURSOR_LEFT_HOOK;
        } else if (inRange(x, sf + 2, sf + 2 + r)) {
            highlightedComponent = HighlightedComponent.LEFT_HOOK;
        } else if (inRange(x, sf + 2 + r, st - r - 2)) {
            highlightedComponent = HighlightedComponent.CENTER_HOOK;
            newCursor = CURSOR_CENTRAL_HOOK;
        } else if (inRange(x, st - r - 2, st - 2)) {
            highlightedComponent = HighlightedComponent.RIGHT_HOOK;
        } else if (inRange(x, st - 2, st + 4)) {
            newCursor = CURSOR_RIGHT_HOOK;
        } else {
            highlightedComponent = HighlightedComponent.NONE;
            newCursor = CURSOR_DEFAULT;
        }
        if (newCursor != getCursor()) {
            setCursor(newCursor);
        }
        // only repaint if highlight has changed (save a lot of fps)
        if (highlightedComponent != old) {
            repaint();
        }

    }

    private void formMouseDragged(java.awt.event.MouseEvent evt) {

   
        int x = evt.getX();
        float w = getWidth();
        int r = 16;//skin.getSelectionHookSideLength();

        // TODO 
        int sf = 0;//(int) (model.getSelectionFrom() * w); // FROM
        int st = 0;//(int) (model.getSelectionTo() * w); // TO


        System.out.println("x: " + x + " currentState: " + currentState);
        if (currentState == TimelineState.IDLE) {
            if (inRange(x, sf - 5, sf + 2)) {
                highlightedComponent = HighlightedComponent.LEFT_HOOK;
                currentState = TimelineState.RESIZE_FROM;
            } else if (inRange(x, sf + 2 + r, st - r - 2)) {
                highlightedComponent = HighlightedComponent.CENTER_HOOK;
                currentState = TimelineState.MOVING;
            } else if (inRange(x, st - 2, st + 5)) {
                highlightedComponent = HighlightedComponent.RIGHT_HOOK;
                currentState = TimelineState.RESIZE_TO;
            }
        }

        int delta = 0;
        if (mousex != null) {
            delta = x - mousex;
        }
        mousex = x;

        switch (currentState) {
            case RESIZE_FROM:
                // TODO
                //model.selectFrom(((float) (sf + delta)) / w);
                break;
            case RESIZE_TO:
                // TODO
                //model.selectTo(((float) (st + delta)) / w);
                break;
            case MOVING:
                // TODO
                //model.selectInterval(((float) (sf + delta)) / w, ((float) (st + delta)) / w);
                break;

        }

        //model.selectTo(TOP_ALIGNMENT);        // TODO add your handling code here:
        this.repaint(); // so it will repaint all panels

          


    }

}
