/*
Copyright 2008 WebAtlas
Authors : Mathieu Bastian, Mathieu Jacomy, Julian Bilcke
Website : http://www.gephi.org

This file is part of Gephi.

Gephi is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Gephi is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Gephi.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.gephi.visualization.component;

import java.awt.BorderLayout;
import java.io.Serializable;
import java.util.logging.Logger;
import javax.swing.SwingUtilities;
import org.gephi.visualization.VizController;
import org.gephi.visualization.mode.ModeManager;
import org.gephi.visualization.opengl.AbstractEngine;
import org.gephi.visualization.swing.GraphDrawableImpl;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;

/**
 * Top component which displays something.
 */
final class GraphTopComponent extends TopComponent {

    private static GraphTopComponent instance;
    /** path to the icon used by the component and its open action */
//    static final String ICON_PATH = "SET/PATH/TO/ICON/HERE";
    private static final String PREFERRED_ID = "GraphTopComponent";
    private AbstractEngine engine;

    private GraphTopComponent() {
        initComponents();

        setName(NbBundle.getMessage(GraphTopComponent.class, "CTL_GraphTopComponent"));
        setToolTipText(NbBundle.getMessage(GraphTopComponent.class, "HINT_GraphTopComponent"));
//        setIcon(Utilities.loadImage(ICON_PATH, true));

        //Init
        VizController.getInstance().initInstances();
        engine = VizController.getInstance().getEngine();
        final GraphDrawableImpl drawable = VizController.getInstance().getDrawable();

        //Request component activation and therefore initialize JOGL component
        WindowManager.getDefault().invokeWhenUIReady(new Runnable() {

            public void run() {
                open();
                SwingUtilities.invokeLater(new Runnable() {

                    public void run() {
                        requestActive();
                        add(drawable.getGraphComponent(), BorderLayout.CENTER);
                        remove(waitingLabel);
                    }
                });
            }
        });
    //add(drawable.getGraphComponent(), BorderLayout.CENTER);
    //remove(waitingLabel);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        graphGroup1 = new javax.swing.ButtonGroup();
        waitingLabel = new javax.swing.JLabel();
        controlTab = new javax.swing.JTabbedPane();
        graphPanel = new javax.swing.JPanel();
        fullGraphButton = new javax.swing.JToggleButton();
        visibleGraphButton = new javax.swing.JToggleButton();
        highlightGraphButton = new javax.swing.JToggleButton();

        setLayout(new java.awt.BorderLayout());

        waitingLabel.setBackground(new java.awt.Color(255, 255, 255));
        org.openide.awt.Mnemonics.setLocalizedText(waitingLabel, org.openide.util.NbBundle.getMessage(GraphTopComponent.class, "GraphTopComponent.waitingLabel.text")); // NOI18N
        waitingLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        add(waitingLabel, java.awt.BorderLayout.CENTER);

        graphGroup1.add(fullGraphButton);
        fullGraphButton.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(fullGraphButton, org.openide.util.NbBundle.getMessage(GraphTopComponent.class, "GraphTopComponent.fullGraphButton.text")); // NOI18N
        fullGraphButton.setMargin(new java.awt.Insets(2, 7, 2, 7));
        fullGraphButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fullGraphButtonActionPerformed(evt);
            }
        });

        graphGroup1.add(visibleGraphButton);
        org.openide.awt.Mnemonics.setLocalizedText(visibleGraphButton, org.openide.util.NbBundle.getMessage(GraphTopComponent.class, "GraphTopComponent.visibleGraphButton.text")); // NOI18N
        visibleGraphButton.setMargin(new java.awt.Insets(2, 7, 2, 7));
        visibleGraphButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                visibleGraphButtonActionPerformed(evt);
            }
        });

        graphGroup1.add(highlightGraphButton);
        org.openide.awt.Mnemonics.setLocalizedText(highlightGraphButton, org.openide.util.NbBundle.getMessage(GraphTopComponent.class, "GraphTopComponent.highlightGraphButton.text")); // NOI18N
        highlightGraphButton.setMargin(new java.awt.Insets(2, 7, 2, 7));
        highlightGraphButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                highlightGraphButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout graphPanelLayout = new javax.swing.GroupLayout(graphPanel);
        graphPanel.setLayout(graphPanelLayout);
        graphPanelLayout.setHorizontalGroup(
            graphPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(graphPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(fullGraphButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(visibleGraphButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(highlightGraphButton)
                .addContainerGap(232, Short.MAX_VALUE))
        );
        graphPanelLayout.setVerticalGroup(
            graphPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, graphPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(graphPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fullGraphButton)
                    .addComponent(visibleGraphButton)
                    .addComponent(highlightGraphButton))
                .addContainerGap())
        );

        controlTab.addTab(org.openide.util.NbBundle.getMessage(GraphTopComponent.class, "GraphTopComponent.graphPanel.TabConstraints.tabTitle"), graphPanel); // NOI18N

        add(controlTab, java.awt.BorderLayout.PAGE_END);
    }// </editor-fold>//GEN-END:initComponents

    private void fullGraphButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fullGraphButtonActionPerformed
        ModeManager modeManager = VizController.getInstance().getModeManager();
        modeManager.selectMode(ModeManager.AVAILABLE_MODES.FULL);
    }//GEN-LAST:event_fullGraphButtonActionPerformed

    private void visibleGraphButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_visibleGraphButtonActionPerformed
        ModeManager modeManager = VizController.getInstance().getModeManager();
        modeManager.selectMode(ModeManager.AVAILABLE_MODES.VISIBLE);
    }//GEN-LAST:event_visibleGraphButtonActionPerformed

    private void highlightGraphButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_highlightGraphButtonActionPerformed
        ModeManager modeManager = VizController.getInstance().getModeManager();
        modeManager.selectMode(ModeManager.AVAILABLE_MODES.HIGHLIGHT);
    }//GEN-LAST:event_highlightGraphButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane controlTab;
    private javax.swing.JToggleButton fullGraphButton;
    private javax.swing.ButtonGroup graphGroup1;
    private javax.swing.JPanel graphPanel;
    private javax.swing.JToggleButton highlightGraphButton;
    private javax.swing.JToggleButton visibleGraphButton;
    private javax.swing.JLabel waitingLabel;
    // End of variables declaration//GEN-END:variables

    /**
     * Gets default instance. Do not use directly: reserved for *.settings files only,
     * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
     * To obtain the singleton instance, use {@link #findInstance}.
     */
    public static synchronized GraphTopComponent getDefault() {
        if (instance == null) {
            instance = new GraphTopComponent();
        }
        return instance;
    }

    /**
     * Obtain the GraphTopComponent instance. Never call {@link #getDefault} directly!
     */
    public static synchronized GraphTopComponent findInstance() {
        TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
        if (win == null) {
            Logger.getLogger(GraphTopComponent.class.getName()).warning(
                    "Cannot find " + PREFERRED_ID + " component. It will not be located properly in the window system.");
            return getDefault();
        }
        if (win instanceof GraphTopComponent) {
            return (GraphTopComponent) win;
        }
        Logger.getLogger(GraphTopComponent.class.getName()).warning(
                "There seem to be multiple components with the '" + PREFERRED_ID +
                "' ID. That is a potential source of errors and unexpected behavior.");
        return getDefault();
    }

    @Override
    public int getPersistenceType() {
        return TopComponent.PERSISTENCE_ALWAYS;
    }

    @Override
    protected void componentShowing() {
        super.componentShowing();
        engine.startDisplay();
    }

    @Override
    protected void componentHidden() {
        super.componentHidden();
        engine.stopDisplay();
    }

    @Override
    public void componentOpened() {
    }

    @Override
    public void componentClosed() {
        engine.stopDisplay();
    }

    /** replaces this in object stream */
    @Override
    public Object writeReplace() {
        return new ResolvableHelper();
    }

    @Override
    protected String preferredID() {
        return PREFERRED_ID;
    }

    final static class ResolvableHelper implements Serializable {

        private static final long serialVersionUID = 1L;

        public Object readResolve() {
            return GraphTopComponent.getDefault();
        }
    }
}
