/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.gephi.desktop.context;

import java.awt.BorderLayout;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.NumberFormat;
import java.util.concurrent.ExecutorService;
import javax.swing.SwingUtilities;
import javax.swing.text.NumberFormatter;
import org.gephi.graph.api.Graph;
import org.gephi.graph.api.GraphEvent;
import org.gephi.graph.api.GraphListener;
import org.gephi.graph.api.GraphModel;

/**
 *
 * @author Mathieu Bastian
 */
public class ContextPanel extends javax.swing.JPanel implements GraphListener {

    private GraphModel model;
    private ContextPieChart pieChart;
    private NumberFormat formatter;
    private boolean showPie = true;

    public ContextPanel() {
        initComponents();
        initDesign();
        refreshModel(null);

        pieButton.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                pieChart.setChartVisible(pieButton.isSelected());
            }
        });
    }

    private void initDesign() {
        pieChart = new ContextPieChart();
        piePanel.add(pieChart.getChartPanel(), BorderLayout.CENTER);
        labelNodes.setFont(labelNodes.getFont().deriveFont(Font.BOLD));
        labelEdges.setFont(labelEdges.getFont().deriveFont(Font.BOLD));
        formatter = NumberFormat.getPercentInstance();
        formatter.setMaximumFractionDigits(2);
    }

    public void refreshModel(GraphModel model) {
        if (this.model != null) {
            this.model.removeGraphListener(this);
        }
        this.model = model;
        setEnable(model != null);
        if (this.model != null) {
            model.addGraphListener(this);
            refreshModelData();
        }
    }

    private void refreshModelData() {
        Graph visibleGraph = model.getGraphVisible();
        Graph fullGraph = model.getGraph();
        visibleGraph.readLock();
        fullGraph.readLock();
        final int nodesFull = fullGraph.getNodeCount();
        final int nodesVisible = visibleGraph.getNodeCount();
        final int edgesFull = fullGraph.getEdgeCount();
        final int edgesVisible = visibleGraph.getEdgeCount();
        fullGraph.readUnlock();
        visibleGraph.readUnlock();
        SwingUtilities.invokeLater(new Runnable() {

            public void run() {
                String nodePerc = nodesFull > 0 ? " (" + formatter.format(nodesVisible / (double) nodesFull) + ")" : "";
                String edgePerc = edgesFull > 0 ? " (" + formatter.format(edgesVisible / (double) edgesFull) + ")" : "";
                nodeLabel.setText(String.valueOf(nodesVisible) + nodePerc);
                edgeLabel.setText(String.valueOf(edgesVisible) + edgePerc);
                double percentage = 0.5 * nodesVisible / (double) nodesFull + 0.5 * edgesVisible / (double) edgesFull;
                pieChart.refreshChart(percentage);
            }
        });
    }

    public void graphChanged(GraphEvent event) {
        refreshModelData();
    }

    private void setEnable(boolean enable) {
        labelNodes.setEnabled(enable);
        labelEdges.setEnabled(enable);
        nodeLabel.setEnabled(enable);
        edgeLabel.setEnabled(enable);
        if (!enable) {
            nodeLabel.setText("NaN");
            edgeLabel.setText("NaN");
        }
        pieButton.setEnabled(enable);
        piePanel.setVisible(showPie);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        commandToolbar = new javax.swing.JToolBar();
        pieButton = new javax.swing.JToggleButton();
        piePanel = new javax.swing.JPanel();
        labelNodes = new javax.swing.JLabel();
        nodeLabel = new javax.swing.JLabel();
        labelEdges = new javax.swing.JLabel();
        edgeLabel = new javax.swing.JLabel();

        setLayout(new java.awt.GridBagLayout());

        commandToolbar.setFloatable(false);
        commandToolbar.setOrientation(1);
        commandToolbar.setRollover(true);
        commandToolbar.setOpaque(false);

        pieButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/gephi/desktop/context/resources/pie.png"))); // NOI18N
        pieButton.setSelected(true);
        pieButton.setText(org.openide.util.NbBundle.getMessage(ContextPanel.class, "ContextPanel.pieButton.text")); // NOI18N
        pieButton.setFocusable(false);
        pieButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        pieButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        commandToolbar.add(pieButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        add(commandToolbar, gridBagConstraints);

        piePanel.setOpaque(false);
        piePanel.setLayout(new java.awt.BorderLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(piePanel, gridBagConstraints);

        labelNodes.setText(org.openide.util.NbBundle.getMessage(ContextPanel.class, "ContextPanel.labelNodes.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 0, 5);
        add(labelNodes, gridBagConstraints);

        nodeLabel.setText(org.openide.util.NbBundle.getMessage(ContextPanel.class, "ContextPanel.nodeLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 0, 3);
        add(nodeLabel, gridBagConstraints);

        labelEdges.setText(org.openide.util.NbBundle.getMessage(ContextPanel.class, "ContextPanel.labelEdges.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 4, 4, 5);
        add(labelEdges, gridBagConstraints);

        edgeLabel.setText(org.openide.util.NbBundle.getMessage(ContextPanel.class, "ContextPanel.edgeLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 4, 4, 3);
        add(edgeLabel, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToolBar commandToolbar;
    private javax.swing.JLabel edgeLabel;
    private javax.swing.JLabel labelEdges;
    private javax.swing.JLabel labelNodes;
    private javax.swing.JLabel nodeLabel;
    private javax.swing.JToggleButton pieButton;
    private javax.swing.JPanel piePanel;
    // End of variables declaration//GEN-END:variables
}
