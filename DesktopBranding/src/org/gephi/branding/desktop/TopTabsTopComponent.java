/*
Copyright 2008 WebAtlas
Authors : Mathieu Bastian, Mathieu Jacomy, Julian Bilcke
Website : http://www.gephi.org

This file is part of Gephi.

Gephi is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Gephi is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Gephi.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.gephi.branding.desktop;

import java.io.Serializable;
import java.util.Arrays;
import java.util.Comparator;
import java.util.logging.Logger;
import javax.swing.JPanel;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import org.gephi.branding.desktop.group.ComponentGroup;
import org.gephi.branding.desktop.group.LaboratoryGroup;
import org.gephi.branding.desktop.group.OverviewGroup;
import org.gephi.branding.desktop.group.PreviewGroup;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.TopComponentGroup;
import org.openide.windows.WindowManager;
//import org.openide.util.Utilities;

/**
 * Top component which displays something.
 */
final class TopTabsTopComponent extends TopComponent {

    private static TopTabsTopComponent instance;
    /** path to the icon used by the component and its open action */
//    static final String ICON_PATH = "SET/PATH/TO/ICON/HERE";
    private static final String PREFERRED_ID = "TopTabsTopComponent";

    private TopTabsTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(TopTabsTopComponent.class, "CTL_TopTabsTopComponent"));
        setToolTipText(NbBundle.getMessage(TopTabsTopComponent.class, "HINT_TopTabsTopComponent"));
//        setIcon(Utilities.loadImage(ICON_PATH, true));

        addGroupTabs();
    }

    private void addGroupTabs() {

        final ComponentGroup[] groups = new ComponentGroup[3];
        groups[0] = new OverviewGroup();
        groups[1] = new LaboratoryGroup();
        groups[2] = new PreviewGroup();

        //Sort by priority
        Arrays.sort(groups, new Comparator<ComponentGroup>() {

            public int compare(ComponentGroup o1, ComponentGroup o2) {
                return ((Integer) o2.getPriority()).compareTo((Integer) o1.getPriority());
            }
        });

        //Add tabs
        for (ComponentGroup group : groups) {
            JPanel groupPanel = new JPanel(null);
            tabbedPane.addTab(group.getDisplayName(), group.getIcon(), groupPanel);
        }

        //Selected tab
        tabbedPane.setSelectedIndex(0);

        //Define action
        tabbedPane.addChangeListener(new ChangeListener() {

            public void stateChanged(ChangeEvent e) {
                ComponentGroup selectedGroup = groups[tabbedPane.getSelectedIndex()];

                //Close others
                for (ComponentGroup group : groups) {
                    if (group != selectedGroup) {
                        TopComponentGroup tpg = WindowManager.getDefault().findTopComponentGroup(group.getGroupName());
                        tpg.close();
                    }
                }
                //Open selected
                TopComponentGroup tpg = WindowManager.getDefault().findTopComponentGroup(selectedGroup.getGroupName());
                tpg.open();
            }
        });
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        imagePanel = new org.jdesktop.swingx.JXImagePanel();
        tabbedPane = new javax.swing.JTabbedPane();

        imagePanel.setBackground(new java.awt.Color(255, 255, 255));

        tabbedPane.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);

        javax.swing.GroupLayout imagePanelLayout = new javax.swing.GroupLayout(imagePanel);
        imagePanel.setLayout(imagePanelLayout);
        imagePanelLayout.setHorizontalGroup(
            imagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(imagePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 417, Short.MAX_VALUE))
        );
        imagePanelLayout.setVerticalGroup(
            imagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, imagePanelLayout.createSequentialGroup()
                .addContainerGap(129, Short.MAX_VALUE)
                .addComponent(tabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(imagePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(imagePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.jdesktop.swingx.JXImagePanel imagePanel;
    private javax.swing.JTabbedPane tabbedPane;
    // End of variables declaration//GEN-END:variables

    /**
     * Gets default instance. Do not use directly: reserved for *.settings files only,
     * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
     * To obtain the singleton instance, use {@link #findInstance}.
     */
    public static synchronized TopTabsTopComponent getDefault() {
        if (instance == null) {
            instance = new TopTabsTopComponent();
        }
        return instance;
    }

    /**
     * Obtain the TopTabsTopComponent instance. Never call {@link #getDefault} directly!
     */
    public static synchronized TopTabsTopComponent findInstance() {
        TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
        if (win == null) {
            Logger.getLogger(TopTabsTopComponent.class.getName()).warning(
                    "Cannot find " + PREFERRED_ID + " component. It will not be located properly in the window system.");
            return getDefault();
        }
        if (win instanceof TopTabsTopComponent) {
            return (TopTabsTopComponent) win;
        }
        Logger.getLogger(TopTabsTopComponent.class.getName()).warning(
                "There seem to be multiple components with the '" + PREFERRED_ID +
                "' ID. That is a potential source of errors and unexpected behavior.");
        return getDefault();
    }

    @Override
    public int getPersistenceType() {
        return TopComponent.PERSISTENCE_ALWAYS;
    }

    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    /** replaces this in object stream */
    @Override
    public Object writeReplace() {
        return new ResolvableHelper();
    }

    @Override
    protected String preferredID() {
        return PREFERRED_ID;
    }

    final static class ResolvableHelper implements Serializable {

        private static final long serialVersionUID = 1L;

        public Object readResolve() {
            return TopTabsTopComponent.getDefault();
        }
    }
}
