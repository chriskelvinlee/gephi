/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.gephi.desktop.timeline;

import java.util.logging.Logger;
import javax.swing.JPanel;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import org.gephi.project.api.ProjectController;
import org.gephi.timeline.api.TimelineModel;
import org.gephi.timeline.spi.TimelineUI;
import org.gephi.workspace.api.Workspace;
import org.gephi.workspace.api.WorkspaceListener;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
import org.openide.util.ImageUtilities;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.util.Lookup;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//org.gephi.desktop.timeline//Timeline//EN",
autostore = false)
public final class TimelineTopComponent extends TopComponent implements ChangeListener {

    private static TimelineTopComponent instance;

    /** path to the icon used by the component and its open action */
    static final String ICON_PATH = "org/gephi/desktop/timeline/resources/ui-status-bar.png";
    private static final String PREFERRED_ID = "TimelineTopComponent";

    private TimelineModel model;
    private TimelineUI timelineUI;

    public TimelineTopComponent() {
        model = Lookup.getDefault().lookup(TimelineModel.class);
        timelineUI = Lookup.getDefault().lookup(TimelineUI.class);
        if (model != null && timelineUI != null) {
            timelineUI.setModel(model);
        }
        initComponents();
        setName(NbBundle.getMessage(TimelineTopComponent.class, "CTL_TimelineTopComponent"));
        setToolTipText(NbBundle.getMessage(TimelineTopComponent.class, "HINT_TimelineTopComponent"));
        setIcon(ImageUtilities.loadImage(ICON_PATH, true));
        putClientProperty(TopComponent.PROP_MAXIMIZATION_DISABLED, Boolean.TRUE);





        //Workspace events
        ProjectController pc = Lookup.getDefault().lookup(ProjectController.class);
        pc.addWorkspaceListener(new WorkspaceListener() {

            public void initialize(Workspace workspace) {
                workspace.add(new TimelineModelImpl());
            }

            public void select(Workspace workspace) {
                TimelineModelImpl m = workspace.getLookup().lookup(TimelineModelImpl.class);
                if (m == null) {
                    m = new TimelineModelImpl();
                    workspace.add(m);
                }
                refreshModel(m);
            }

            public void unselect(Workspace workspace) {
            }

            public void close(Workspace workspace) {
            }

            public void disable() {
                refreshModel(null);
            }
        });

        if (pc.getCurrentWorkspace() != null) {
            refreshModel(pc.getCurrentWorkspace().getLookup().lookup(StatisticsModelImpl.class));
        } else {
            refreshModel(null);
        }

        //Settings
        settingsButton.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                AvailableStatisticsChooser chooser = new AvailableStatisticsChooser();
                chooser.setup(model, ((StatisticsPanel) statisticsPanel).getCategories());
                DialogDescriptor dd = new DialogDescriptor(chooser, NbBundle.getMessage(StatisticsTopComponent.class, "AvailableStatisticsChooser.title"));
                if (DialogDisplayer.getDefault().notify(dd).equals(NotifyDescriptor.OK_OPTION)) {
                    chooser.unsetup();
                }
            }
        });
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        timelineToolbar = new javax.swing.JToolBar();
        settingsButton = new javax.swing.JButton();
        drawerPanel = (timelineUI!=null) ? timelineUI.getDrawerPanel() : new JPanel();

        setLayout(new java.awt.GridBagLayout());

        timelineToolbar.setFloatable(false);
        timelineToolbar.setOrientation(1);
        timelineToolbar.setRollover(true);

        org.openide.awt.Mnemonics.setLocalizedText(settingsButton, org.openide.util.NbBundle.getMessage(TimelineTopComponent.class, "TimelineTopComponent.settingsButton.text")); // NOI18N
        settingsButton.setFocusable(false);
        settingsButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        settingsButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        timelineToolbar.add(settingsButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        add(timelineToolbar, gridBagConstraints);

        javax.swing.GroupLayout drawerPanelLayout = new javax.swing.GroupLayout(drawerPanel);
        drawerPanel.setLayout(drawerPanelLayout);
        drawerPanelLayout.setHorizontalGroup(
            drawerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 333, Short.MAX_VALUE)
        );
        drawerPanelLayout.setVerticalGroup(
            drawerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(drawerPanel, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel drawerPanel;
    private javax.swing.JButton settingsButton;
    private javax.swing.JToolBar timelineToolbar;
    // End of variables declaration//GEN-END:variables
    /**
     * Gets default instance. Do not use directly: reserved for *.settings files only,
     * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
     * To obtain the singleton instance, use {@link #findInstance}.
     */
    public static synchronized TimelineTopComponent getDefault() {
        if (instance == null) {
            instance = new TimelineTopComponent();
        }
        return instance;
    }

    /**
     * Obtain the TimelineTopComponent instance. Never call {@link #getDefault} directly!
     */
    public static synchronized TimelineTopComponent findInstance() {
        TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
        if (win == null) {
            Logger.getLogger(TimelineTopComponent.class.getName()).warning(
                    "Cannot find " + PREFERRED_ID + " component. It will not be located properly in the window system.");
            return getDefault();
        }
        if (win instanceof TimelineTopComponent) {
            return (TimelineTopComponent) win;
        }
        Logger.getLogger(TimelineTopComponent.class.getName()).warning(
                "There seem to be multiple components with the '" + PREFERRED_ID
                + "' ID. That is a potential source of errors and unexpected behavior.");
        return getDefault();
    }

    @Override
    public int getPersistenceType() {
        return TopComponent.PERSISTENCE_ALWAYS;
    }

    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    Object readProperties(java.util.Properties p) {
        if (instance == null) {
            instance = this;
        }
        instance.readPropertiesImpl(p);
        return instance;
    }

    private void readPropertiesImpl(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    protected String preferredID() {
        return PREFERRED_ID;
    }


    private void refreshModel(TimelineModelImpl model) {
        if (model != null && model != this.model) {
            if (this.model != null) {
                this.model.removeChangeListener(this);
            }
            model.addChangeListener(this);
        }
        this.model = model;
        refreshEnable(model != null);
        ((TimelineDrawerPanel) timelinePanel).refreshModel(model);
    }


    private void refreshEnable(boolean enable) {
        drawerPanel.setEnabled(enable);
        timelineToolbar.setEnabled(enable);
        settingsButton.setEnabled(enable);
    }


    public void stateChanged(ChangeEvent e) {
        refreshModel(model);
    }
}
